{"mappings":"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","sources":["<anon>","public/ClientSideJS/index.cjs","public/ClientSideJS/signup.js","public/ClientSideJS/fetchData.js","public/ClientSideJS/alerts.cjs","public/ClientSideJS/login.cjs","public/ClientSideJS/updateProfile.js","public/ClientSideJS/tap.js"],"sourcesContent":["const $32c8ba8834f4555b$var$REQUEST_TIMEOUT_SEC = 5;\nconst $32c8ba8834f4555b$var$timeout = (sec)=>new Promise((_, reject)=>{\n        setTimeout(()=>reject(Error(`Request timed out. Please try again later...`)), sec * 1000);\n    });\nconst $32c8ba8834f4555b$export$d852f5f778460fa4 = async (url, methodType, uploadData = null, type)=>{\n    let options;\n    if (type === \"profile\") {\n        const formData = new FormData();\n        for(const name in uploadData)formData.append(name, uploadData[name]);\n        options = {\n            method: methodType,\n            body: formData\n        };\n    } else options = {\n        method: methodType,\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(uploadData)\n    };\n    try {\n        const request = uploadData ? fetch(url, {\n            ...options\n        }) : fetch(url);\n        const response = await Promise.race([\n            request,\n            $32c8ba8834f4555b$var$timeout($32c8ba8834f4555b$var$REQUEST_TIMEOUT_SEC)\n        ]);\n        const data = await response.json();\n        if (!response.ok) throw Error(data.message);\n        return data;\n    } catch (error) {\n        if (error.message === \"Failed to fetch\") error.message = `Unable to reach the server. Please check your internet connection...`;\n        throw error;\n    }\n}; /*\r\n\r\n\r\nexport const useFetch = async(url, methodType, uploadData = null, type) => {\r\n  console.log(uploadData);\r\n  \r\n  let options = { headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(uploadData)};\r\n  if(type === \"updateMyData\") options = { body: uploadData};\r\n\r\n  console.log(options);\r\n  \r\n  try {\r\n    const request = uploadData\r\n      ? fetch(url, {\r\n          method: methodType,\r\n          options\r\n        })\r\n      : fetch(url);\r\n\r\n    const response = await Promise.race([request, timeout(REQUEST_TIMEOUT_SEC)]);\r\n    console.log(response);\r\n    \r\n    const data = await response.json();\r\n    console.log(data);\r\n    \r\n    if (!response.ok) throw Error(data.message);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    if (error.message === \"Failed to fetch\")\r\n      error.message = `Unable to reach the server. Please check your internet connection...`;\r\n    throw error;\r\n  }\r\n};\r\n\r\n*/ \n\n\nconst $11da21f8e65c7fa8$var$hideAlerts = ()=>{\n    const el = document.querySelector(\".alert\");\n    if (el) el.parentElement.removeChild(el);\n};\nconst $11da21f8e65c7fa8$export$27077c57cd15b0d5 = (type, msg, time = 4)=>{\n    $11da21f8e65c7fa8$var$hideAlerts();\n    const htmlCode = `<div class=\"alert alert--${type}\">${msg}</div>`;\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", htmlCode);\n    window.setTimeout($11da21f8e65c7fa8$var$hideAlerts, time * 1000);\n};\n\n\nconst $960403e935ca8291$export$7200a869094fec36 = async (data)=>{\n    try {\n        const result = await (0, $32c8ba8834f4555b$export$d852f5f778460fa4)(\"/api/v1/users/signup\", \"POST\", data);\n        if (result.status === \"success\") {\n            (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"success\", \"Your account on Natours is ready ! login and Start the Adventures\");\n            setTimeout(()=>location.assign(\"/\"), 1500);\n        }\n        if (result.status !== \"success\") return;\n    } catch (error) {\n        (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"error\", error.message);\n    }\n};\n\n\n\n\nconst $0a142c31b95f19d8$export$596d806903d1f59e = async (email, password)=>{\n    // console.log(email, password);\n    try {\n        const result = await (0, $32c8ba8834f4555b$export$d852f5f778460fa4)(\"/api/v1/users/login\", \"POST\", {\n            email: email,\n            password: password\n        });\n        if (result.status === \"success\") setTimeout(()=>window.location.replace(\"/\"), 200);\n        // setTimeout(() => window.location.assign(\"/\"), 1000); // another way or redirecting the user to the overview page\n        if (result.status !== \"success\") return;\n    } catch (error) {\n        (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"error\", error.message);\n    }\n};\nconst $0a142c31b95f19d8$export$a0973bcfe11b05c9 = async ()=>{\n    try {\n        const result = await (0, $32c8ba8834f4555b$export$d852f5f778460fa4)(\"/api/v1/users/logout\", \"GET\");\n        /*\r\n       just use location.replace instead of assign inorder to discard current page from the history \r\n       and then load new document\r\n    */ if (result.status === \"success\") /*\r\n      I changed this because when the user logged out while still inside one of the protected routes (myBookings, myProfile), \r\n      the same protected page was going to reload with an unloged-in user so an error message was going to appear . \r\n      and the correct behaviour in this case is to redirect the user to the home page\r\n      location.reload(true); // true for forcing the reload from the server and not from the browser cache .\r\n    */ setTimeout(()=>window.location.assign(\"/\"), 1000);\n    } catch (error) {\n        (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"error\", \"Error has occurred while logging out, try again\");\n    }\n} /*\r\n        useFetch is a helper function that can be used with both POST & GET requests (depending if you provide the 2nd argument or not).\r\n        timeout is another helper that will reject the promise and throw an error after the specified amount of time (for request to time out)\r\n        You can move these 2 functions to a separate module if you are using a bundler or ES6 modules (so you can reuse' em anywhere you want)\r\n*/ ;\n\n\n\n\nconst $5f249e58cb8bb1c8$export$989146c0ac46c040 = async (data, type)=>{\n    // console.log(\"updateTheProfile INSIDER \"+type);\n    try {\n        const url = type === \"password\" ? \"updateMyPassword\" : \"updateMyData\";\n        const result = await (0, $32c8ba8834f4555b$export$d852f5f778460fa4)(`/api/v1/users/${url}`, \"PATCH\", data, type);\n        // console.log(result.status);\n        if (result.status === \"success\") (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"success\", `Your ${type}'s been updated successfully !♥`);\n    } catch (error) {\n        (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"error\", error.message);\n    }\n};\n\n\n\n\nconst $700432535f94176c$export$8d5bdbf26681c0c2 = async (tourId)=>{\n    try {\n        const result = await (0, $32c8ba8834f4555b$export$d852f5f778460fa4)(`/api/v1/bookings/checkout/${tourId}`, \"POST\", {\n            tourId: tourId\n        });\n        if (result.status === \"success\") {\n            (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"success\", \"Your've booked one tour successfully\");\n            setTimeout(()=>location.assign(\"/myBookings\"), 1500);\n        }\n    } catch (error) {\n        (0, $11da21f8e65c7fa8$export$27077c57cd15b0d5)(\"error\", error.message);\n    // setTimeout(() => location.assign(\"/myBookings\"), 1.5 * 1000);\n    }\n} /*\r\n\r\nimport axios from \"axios\";\r\nimport { showAlerts } from \"./alerts.cjs\";\r\n\r\nexport const payTour = async (tourId) => {\r\n  try {\r\n    // 1) Getting the session of the server by using\r\n    //  the route of /cheaout-session endpoint:\r\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\r\n    // console.log(session);\r\n\r\n    // 2) Using TAP to automatichally create the checkout form\r\n    //  and Charging the credit card :\r\n    \r\n    await strip.redirectTocheckout({\r\n        sessionId: session.data.session.id // this comes from axios .\r\n    });\r\n    \r\n  } catch (error) {\r\n    showAlerts(\"error\", \"Sorry, something went worng, Try againg\");\r\n    // console.log(error);\r\n    \r\n  }\r\n};\r\n\r\n*/ ;\n\n\n// const handleSubmit = (event) => {\n//   event.preventDefault();\n//   const email = event.target.email?.value;\n//   const password = event.target.password?.value;\n// // console.log(email, password);\n//   login(email, password);\n//   formEl.reset();\n// };\n// All of the IFs here are to prevent CAN'T READ NULL .FROM when we're in pages that doesn't have form element .\nconst $2c7c8db47f5d2834$var$formSignup = document.querySelector(\".form--signup\");\nif ($2c7c8db47f5d2834$var$formSignup) $2c7c8db47f5d2834$var$formSignup.addEventListener(\"submit\", (event)=>{\n    console.log(\"formSignup eventListener INSIDER\");\n    event.preventDefault();\n    document.querySelector(\".btn--form-signup\").textContent = \"Processing...\";\n    const name = event.target.username.value;\n    const email = event.target.email.value;\n    const password = event.target.password.value;\n    const passwordConfirm = event.target.passwordConfirm.value;\n    (0, $960403e935ca8291$export$7200a869094fec36)({\n        name: name,\n        email: email,\n        password: password,\n        passwordConfirm: passwordConfirm\n    });\n    $2c7c8db47f5d2834$var$formSignup.reset();\n});\nconst $2c7c8db47f5d2834$var$formEl = document.querySelector(\".form--login\");\nif ($2c7c8db47f5d2834$var$formEl) $2c7c8db47f5d2834$var$formEl.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    const email = event.target.email?.value;\n    const password = event.target.password?.value;\n    // console.log(email, password);\n    (0, $0a142c31b95f19d8$export$596d806903d1f59e)(email, password);\n    $2c7c8db47f5d2834$var$formEl.reset();\n});\nconst $2c7c8db47f5d2834$var$logoutBtn = document.querySelector(\".nav__el--logout\");\nif ($2c7c8db47f5d2834$var$logoutBtn) $2c7c8db47f5d2834$var$logoutBtn.addEventListener(\"click\", (0, $0a142c31b95f19d8$export$a0973bcfe11b05c9));\nconst $2c7c8db47f5d2834$var$profileForm = document.querySelector(\".form-user-data\");\nif ($2c7c8db47f5d2834$var$profileForm) $2c7c8db47f5d2834$var$profileForm.addEventListener(\"submit\", (event)=>{\n    event.preventDefault();\n    document.querySelector(\".btn--save-settings\").textContent = \"Updating...\";\n    /* OLD CODE\r\n    const form = new FormData();\r\n  \r\n    // form.append(\"name\", document.getElementById(\"name\").value);\r\n    // form.append(\"email\", document.getElementById(\"email\").value);\r\n    // form.append(\"photo\", document.getElementById(\"photo\").files[0]); // files here is an array, but it will only contain one element so we're going to specify it directly .\r\n\r\n    form.append(\"name\", name);\r\n    form.append(\"email\", email);\r\n    form.append(\"photo\", photo);\r\n    */ const name = event.target.name?.value;\n    // console.log(name);\n    const email = event.target.email?.value;\n    // console.log(email);\n    const photo = event.target.photo?.files[0];\n    // console.log(photo);\n    // an equvelant way to the two lines fo OLD CODE\n    // const name = document.getElementById(\"name\").value;\n    // const email = document.getElementById(\"email\").value;\n    // updateProfile(name, email);\n    (0, $5f249e58cb8bb1c8$export$989146c0ac46c040)({\n        name: name,\n        email: email,\n        photo: photo\n    }, \"profile\");\n    $2c7c8db47f5d2834$var$profileForm.reset();\n    setTimeout(()=>location.reload(), 1000);\n});\nconst $2c7c8db47f5d2834$var$passwordForm = document.querySelector(\".form-user-password\");\nif ($2c7c8db47f5d2834$var$passwordForm) $2c7c8db47f5d2834$var$passwordForm.addEventListener(\"submit\", async (event)=>{\n    event.preventDefault();\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\n    const currentPassword = document.getElementById(\"password-current\").value;\n    const newPassword = document.getElementById(\"password-new\").value;\n    const confirmNewPassword = document.getElementById(\"password-confirm\").value;\n    await (0, $5f249e58cb8bb1c8$export$989146c0ac46c040)({\n        currentPassword: currentPassword,\n        newPassword: newPassword,\n        confirmNewPassword: confirmNewPassword\n    }, \"password\");\n    $2c7c8db47f5d2834$var$passwordForm.reset();\n    document.querySelector(\".btn--save-password\").textContent = \"Save Password\";\n});\nconst $2c7c8db47f5d2834$var$bookingBtn = document.getElementById(\"book-tour\");\nif ($2c7c8db47f5d2834$var$bookingBtn) $2c7c8db47f5d2834$var$bookingBtn.addEventListener(\"click\", (event)=>{\n    /*\r\n\r\n      inside tour.pug we've defined the dataset varible as tour-id\r\n      which is going to be converted to a Camel case like this tourId because of JavaScript\r\n      therefor no need to write the code like the way below, we can shorten it\r\n      like we actually have been doning using the {}.\r\n\r\n      const tourId = event.target.dataset.tourId;\r\n\r\n      */ $2c7c8db47f5d2834$var$bookingBtn.textContent = \"Processing...\";\n    const { tourId: tourId } = event.target.dataset;\n    (0, $700432535f94176c$export$8d5bdbf26681c0c2)(tourId);\n});\n\n\n//# sourceMappingURL=index.js.map\n","import { signup } from \"./signup\";\r\nimport { login, logout } from \"./login.cjs\";\r\nimport { updateTheProfile } from \"./updateProfile\";\r\nimport { bookTour } from \"./tap\";\r\n\r\n// const handleSubmit = (event) => {\r\n//   event.preventDefault();\r\n\r\n//   const email = event.target.email?.value;\r\n//   const password = event.target.password?.value;\r\n// // console.log(email, password);\r\n//   login(email, password);\r\n\r\n//   formEl.reset();\r\n// };\r\n\r\n// All of the IFs here are to prevent CAN'T READ NULL .FROM when we're in pages that doesn't have form element .\r\n\r\nconst formSignup = document.querySelector(\".form--signup\");\r\nif(formSignup) formSignup.addEventListener(\"submit\", (event) => {\r\n  console.log(\"formSignup eventListener INSIDER\");\r\n  \r\n  event.preventDefault();\r\n  document.querySelector(\".btn--form-signup\").textContent = \"Processing...\";\r\n\r\n\r\n  const name = event.target.username.value;\r\n  const email = event.target.email.value;\r\n  const password = event.target.password.value;\r\n  const passwordConfirm = event.target.passwordConfirm.value;\r\n\r\n  signup({name, email, password, passwordConfirm});\r\n  formSignup.reset();\r\n\r\n});\r\n\r\nconst formEl = document.querySelector(\".form--login\");\r\nif (formEl) formEl.addEventListener(\"submit\", (event) => {\r\n  event.preventDefault();\r\n\r\n  const email = event.target.email?.value;\r\n  const password = event.target.password?.value;\r\n// console.log(email, password);\r\n  login(email, password);\r\n\r\n  formEl.reset();\r\n}); \r\n\r\nconst logoutBtn = document.querySelector(\".nav__el--logout\");\r\nif (logoutBtn) logoutBtn.addEventListener(\"click\", logout);\r\n\r\n\r\nconst profileForm = document.querySelector(\".form-user-data\");\r\nif (profileForm) {  \r\n  profileForm.addEventListener(\"submit\", (event) => {\r\n    event.preventDefault();\r\n    document.querySelector(\".btn--save-settings\").textContent = \"Updating...\";\r\n\r\n    /* OLD CODE\r\n    const form = new FormData();\r\n  \r\n    // form.append(\"name\", document.getElementById(\"name\").value);\r\n    // form.append(\"email\", document.getElementById(\"email\").value);\r\n    // form.append(\"photo\", document.getElementById(\"photo\").files[0]); // files here is an array, but it will only contain one element so we're going to specify it directly .\r\n\r\n    form.append(\"name\", name);\r\n    form.append(\"email\", email);\r\n    form.append(\"photo\", photo);\r\n    */\r\n    const name = event.target.name?.value;\r\n    // console.log(name);\r\n    \r\n    const email = event.target.email?.value;\r\n    // console.log(email);\r\n    \r\n    const photo = event.target.photo?.files[0];\r\n    // console.log(photo);\r\n    \r\n    // an equvelant way to the two lines fo OLD CODE\r\n    // const name = document.getElementById(\"name\").value;\r\n    // const email = document.getElementById(\"email\").value;\r\n    // updateProfile(name, email);\r\n\r\n    updateTheProfile({name, email, photo}, \"profile\");\r\n    profileForm.reset();\r\n    setTimeout(() => location.reload(), 1 * 1000);\r\n  });\r\n}\r\nconst passwordForm = document.querySelector(\".form-user-password\");\r\nif (passwordForm)\r\n  passwordForm.addEventListener(\"submit\", async (event) => {\r\n    event.preventDefault();\r\n\r\n    document.querySelector(\".btn--save-password\").textContent = \"Updating...\";\r\n\r\n    const currentPassword = document.getElementById(\"password-current\").value;\r\n    const newPassword = document.getElementById(\"password-new\").value;\r\n    const confirmNewPassword =\r\n      document.getElementById(\"password-confirm\").value;\r\n    await updateTheProfile({ currentPassword, newPassword, confirmNewPassword }, \"password\");\r\n\r\n    passwordForm.reset();\r\n    document.querySelector(\".btn--save-password\").textContent = \"Save Password\";\r\n  });\r\n\r\n  const bookingBtn = document.getElementById(\"book-tour\");\r\nif(bookingBtn)\r\n    bookingBtn.addEventListener(\"click\", event => {\r\n  \r\n      /*\r\n\r\n      inside tour.pug we've defined the dataset varible as tour-id\r\n      which is going to be converted to a Camel case like this tourId because of JavaScript\r\n      therefor no need to write the code like the way below, we can shorten it\r\n      like we actually have been doning using the {}.\r\n\r\n      const tourId = event.target.dataset.tourId;\r\n\r\n      */\r\n      bookingBtn.textContent = \"Processing...\";\r\n      const {tourId} = event.target.dataset;      \r\n      bookTour(tourId);\r\n  });\r\n","import { useFetch } from \"./fetchData\";\r\nimport { showAlerts } from \"./alerts.cjs\";\r\n\r\nexport const signup = async (data) => {\r\n  try {\r\n    const result = await useFetch(\"/api/v1/users/signup\", \"POST\", data);\r\n    \r\n    if (result.status === \"success\") {      \r\n      showAlerts(\"success\",\"Your account on Natours is ready ! login and Start the Adventures\");\r\n      setTimeout(() => location.assign(\"/\"), 1.5 * 1000);\r\n    }\r\n    if (result.status !== \"success\") return;\r\n  } catch (error) {\r\n    showAlerts(\"error\", error.message);\r\n  }\r\n};\r\n","const REQUEST_TIMEOUT_SEC = 5;\r\n\r\nconst timeout = (sec) =>\r\n  new Promise((_, reject) => {\r\n    setTimeout(\r\n      () => reject(Error(`Request timed out. Please try again later...`)),\r\n      sec * 1000\r\n    );\r\n  });\r\n\r\nexport const useFetch = async (url, methodType, uploadData = null, type) => {\r\n\r\n  let options;\r\n\r\n  if (type === \"profile\") {\r\n    const formData = new FormData();\r\n    for (const name in uploadData) {\r\n      formData.append(name, uploadData[name]);\r\n    }\r\n\r\n    options = { method: methodType, body: formData };\r\n  } else {\r\n\r\n    options = {\r\n      method: methodType,\r\n      headers: { \"Content-Type\": \"application/json\" },\r\n      body: JSON.stringify(uploadData),\r\n    };\r\n  }\r\n\r\n  try {\r\n    const request = uploadData ? fetch(url, { ...options }) : fetch(url);\r\n    \r\n    const response = await Promise.race([request, timeout(REQUEST_TIMEOUT_SEC),]);\r\n\r\n    const data = await response.json();\r\n\r\n    if (!response.ok) throw Error(data.message);\r\n    \r\n    return data;\r\n    \r\n  } catch (error) {\r\n    if (error.message === \"Failed to fetch\")\r\n      error.message = `Unable to reach the server. Please check your internet connection...`;\r\n    throw error;\r\n  }\r\n};\r\n\r\n/*\r\n\r\n\r\nexport const useFetch = async(url, methodType, uploadData = null, type) => {\r\n  console.log(uploadData);\r\n  \r\n  let options = { headers: { \"Content-Type\": \"application/json\" }, body: JSON.stringify(uploadData)};\r\n  if(type === \"updateMyData\") options = { body: uploadData};\r\n\r\n  console.log(options);\r\n  \r\n  try {\r\n    const request = uploadData\r\n      ? fetch(url, {\r\n          method: methodType,\r\n          options\r\n        })\r\n      : fetch(url);\r\n\r\n    const response = await Promise.race([request, timeout(REQUEST_TIMEOUT_SEC)]);\r\n    console.log(response);\r\n    \r\n    const data = await response.json();\r\n    console.log(data);\r\n    \r\n    if (!response.ok) throw Error(data.message);\r\n\r\n    return data;\r\n  } catch (error) {\r\n    if (error.message === \"Failed to fetch\")\r\n      error.message = `Unable to reach the server. Please check your internet connection...`;\r\n    throw error;\r\n  }\r\n};\r\n\r\n*/\r\n","const hideAlerts =() => {\r\n    const el = document.querySelector(\".alert\");\r\n    if(el) el.parentElement.removeChild(el);\r\n}\r\n\r\nexport const showAlerts =(type, msg , time = 4) => {  \r\n    hideAlerts();\r\n    const htmlCode = `<div class=\"alert alert--${type}\">${msg}</div>`;\r\n    document.querySelector(\"body\").insertAdjacentHTML(\"afterbegin\", htmlCode);\r\n    window.setTimeout(hideAlerts, time * 1000);\r\n}\r\n","import { showAlerts } from \"./alerts.cjs\";\r\nimport { useFetch } from \"./fetchData\";\r\n\r\nexport const login = async (email, password) => {\r\n  // console.log(email, password);\r\n  \r\n  try {\r\n    const result = await useFetch(\"/api/v1/users/login\", \"POST\", {email, password});\r\n\r\n    if (result.status === \"success\") setTimeout(() => window.location.replace(\"/\"), 200);\r\n    // setTimeout(() => window.location.assign(\"/\"), 1000); // another way or redirecting the user to the overview page\r\n\r\n    if (result.status !== \"success\") return;\r\n  } catch (error) {    \r\n    showAlerts(\"error\", error.message);\r\n  }\r\n};\r\n\r\nexport const logout = async () => {\r\n  try {\r\n\r\n    const result = await useFetch(\"/api/v1/users/logout\", \"GET\");\r\n\r\n    /*\r\n       just use location.replace instead of assign inorder to discard current page from the history \r\n       and then load new document\r\n    */\r\n    if (result.status === \"success\") {\r\n      /*\r\n      I changed this because when the user logged out while still inside one of the protected routes (myBookings, myProfile), \r\n      the same protected page was going to reload with an unloged-in user so an error message was going to appear . \r\n      and the correct behaviour in this case is to redirect the user to the home page\r\n      location.reload(true); // true for forcing the reload from the server and not from the browser cache .\r\n    */\r\n      setTimeout(() => window.location.assign(\"/\"), 1000);\r\n    }\r\n  \r\n  } catch (error) {\r\n    showAlerts(\"error\", \"Error has occurred while logging out, try again\")\r\n  }\r\n}\r\n\r\n/*\r\n        useFetch is a helper function that can be used with both POST & GET requests (depending if you provide the 2nd argument or not).\r\n        timeout is another helper that will reject the promise and throw an error after the specified amount of time (for request to time out)\r\n        You can move these 2 functions to a separate module if you are using a bundler or ES6 modules (so you can reuse' em anywhere you want)\r\n*/\r\n","import { showAlerts } from \"./alerts.cjs\";\r\nimport { useFetch } from \"./fetchData\";\r\n\r\n// const User = require(\"../../models/userModel\");\r\n/*\r\n    This md is a more traditional normal way.\r\n    in which we specify the POST method right on the form,\r\n    along with the URL where the POST request should be sent to.\r\n    By using this method, we don't need JavaScript\r\n    for doing the request, it automatically happens\r\n    with the HTML form which will then post the data\r\n    to the URL endpoint in our backend that we specified.\r\n    exports.noJSUpdateProfile = catchAsync( async(request, response, next) => {\r\n      // console.log(request.body); this won't work and it's going to be embty object, we need a md to parse the data coming from the form .\r\n      // I could add the md in the app.js but I oo lazy to fo that\r\n      // so if yout wanted to implement this way in the future\r\n      // review the lec please .\r\n      const updatedUser = await User.findByIdAndUpdate(request.user.id, {\r\n        name: request.body.name,\r\n        email: request.body.email\r\n        // tne names in request.body.() they must be the same as what we gived o the form in the html -whivh I've not done-\r\n      },\r\n      {\r\n        new: true,\r\n        runValidators: true\r\n      });\r\n      \r\n      response.status(200).render(\"profile\",{\r\n        title: \"My profile\",\r\n        user: updatedUser\r\n      });\r\n    });\r\n  */\r\n\r\n// Updating using our API and JS:\r\n\r\nexport const updateTheProfile = async (data, type) => {\r\n// console.log(\"updateTheProfile INSIDER \"+type);\r\n\r\n  try {\r\n    const url = type === \"password\" ? \"updateMyPassword\" : \"updateMyData\";\r\n    const result = await useFetch(`/api/v1/users/${url}`,\"PATCH\", data, type);\r\n    // console.log(result.status);\r\n\r\n    if (result.status === \"success\") showAlerts(\"success\", `Your ${type}'s been updated successfully !♥`);\r\n    \r\n  } catch (error) {\r\n    showAlerts(\"error\", error.message);\r\n  }\r\n};\r\n","import { useFetch } from \"./fetchData\";\r\nimport { showAlerts } from \"./alerts.cjs\";\r\n\r\nexport const bookTour = (async (tourId) => {\r\n  \r\n  try {\r\n    const result = await useFetch(`/api/v1/bookings/checkout/${tourId}`, \"POST\", {tourId});  \r\n    \r\n    if (result.status === \"success\")  {            \r\n      showAlerts(\"success\",\"Your've booked one tour successfully\");\r\n      setTimeout(() => location.assign(\"/myBookings\"), 1.5 * 1000);\r\n    }\r\n    \r\n  } catch (error) {\r\n    showAlerts(\"error\", error.message);\r\n    // setTimeout(() => location.assign(\"/myBookings\"), 1.5 * 1000);\r\n  }\r\n})\r\n\r\n\r\n/*\r\n\r\nimport axios from \"axios\";\r\nimport { showAlerts } from \"./alerts.cjs\";\r\n\r\nexport const payTour = async (tourId) => {\r\n  try {\r\n    // 1) Getting the session of the server by using\r\n    //  the route of /cheaout-session endpoint:\r\n    const session = await axios(`/api/v1/bookings/checkout-session/${tourId}`);\r\n    // console.log(session);\r\n\r\n    // 2) Using TAP to automatichally create the checkout form\r\n    //  and Charging the credit card :\r\n    \r\n    await strip.redirectTocheckout({\r\n        sessionId: session.data.session.id // this comes from axios .\r\n    });\r\n    \r\n  } catch (error) {\r\n    showAlerts(\"error\", \"Sorry, something went worng, Try againg\");\r\n    // console.log(error);\r\n    \r\n  }\r\n};\r\n\r\n*/"],"names":["$32c8ba8834f4555b$var$timeout","sec","Promise","_","reject","setTimeout","Error","$32c8ba8834f4555b$export$d852f5f778460fa4","url","methodType","uploadData","type","options","formData","FormData","name","append","method","body","headers","JSON","stringify","request","fetch","response","race","data","json","ok","message","error","$11da21f8e65c7fa8$var$hideAlerts","el","document","querySelector","parentElement","removeChild","$11da21f8e65c7fa8$export$27077c57cd15b0d5","msg","time","htmlCode","insertAdjacentHTML","window","$960403e935ca8291$export$7200a869094fec36","result","status","location","assign","$0a142c31b95f19d8$export$596d806903d1f59e","email","password","replace","$0a142c31b95f19d8$export$a0973bcfe11b05c9","$5f249e58cb8bb1c8$export$989146c0ac46c040","$700432535f94176c$export$8d5bdbf26681c0c2","tourId","$2c7c8db47f5d2834$var$formSignup","addEventListener","event","console","log","preventDefault","textContent","target","username","value","passwordConfirm","reset","$2c7c8db47f5d2834$var$formEl","$2c7c8db47f5d2834$var$logoutBtn","$2c7c8db47f5d2834$var$profileForm","photo","files","reload","$2c7c8db47f5d2834$var$passwordForm","currentPassword","getElementById","newPassword","confirmNewPassword","$2c7c8db47f5d2834$var$bookingBtn","dataset"],"version":3,"file":"index.js.map","sourceRoot":"../../../"}